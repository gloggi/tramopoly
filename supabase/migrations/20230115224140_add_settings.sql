create table "public"."mr_t_rewards" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "duration" smallint not null,
    "value" smallint not null
);


alter table "public"."mr_t_rewards" enable row level security;

create table "public"."settings" (
    "id" bigint generated by default as identity not null,
    "game_start" timestamp without time zone not null default now(),
    "game_end" timestamp without time zone not null default (now() + interval '10 hours'),
    "interest_period" smallint not null default '15'::smallint,
    "interest_rate_start" double precision not null default '0.1'::double precision,
    "interest_rate_end" double precision not null default '0.1'::double precision,
    "message_title" text,
    "message_text" text,
    "message_type" text,
    "real_estate_value_ratio" double precision not null default '0.5'::double precision,
    "rent_ratio" double precision not null default '0.2'::double precision,
    "starter_cash" smallint not null default '5000'::smallint
);


alter table "public"."settings" enable row level security;

CREATE UNIQUE INDEX mr_t_rewards_pkey ON public.mr_t_rewards USING btree (id);

CREATE UNIQUE INDEX settings_pkey ON public.settings USING btree (id);

alter table "public"."mr_t_rewards" add constraint "mr_t_rewards_pkey" PRIMARY KEY using index "mr_t_rewards_pkey";

alter table "public"."settings" add constraint "settings_pkey" PRIMARY KEY using index "settings_pkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.role_for(user_id uuid)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
BEGIN
   RETURN(SELECT u.role FROM profiles u WHERE u.id=user_id LIMIT 1);
END
$function$
;

create policy "Enable full access for admins"
on "public"."abteilungen"
as permissive
for all
to authenticated
using ((role_for(auth.uid()) = 'admin'::text))
with check ((role_for(auth.uid()) = 'admin'::text));


create policy "Enable full access for admins"
on "public"."groups"
as permissive
for all
to authenticated
using ((role_for(auth.uid()) = 'admin'::text))
with check ((role_for(auth.uid()) = 'admin'::text));


create policy "Enable full access for admins"
on "public"."message_files"
as permissive
for all
to authenticated
using ((role_for(auth.uid()) = 'admin'::text))
with check ((role_for(auth.uid()) = 'admin'::text));


create policy "Enable full access for admins"
on "public"."messages"
as permissive
for all
to authenticated
using ((role_for(auth.uid()) = 'admin'::text))
with check ((role_for(auth.uid()) = 'admin'::text));


create policy "Enable full access for admins"
on "public"."mr_t_rewards"
as permissive
for all
to authenticated
using ((role_for(auth.uid()) = 'admin'::text))
with check ((role_for(auth.uid()) = 'admin'::text));


create policy "Enable reading for authenticated users"
on "public"."mr_t_rewards"
as permissive
for select
to authenticated
using (true);


create policy "Enable full access for admins"
on "public"."profiles"
as permissive
for all
to authenticated
using ((role_for(auth.uid()) = 'admin'::text))
with check ((role_for(auth.uid()) = 'admin'::text));


create policy "Enable full access for admins"
on "public"."settings"
as permissive
for all
to authenticated
using ((role_for(auth.uid()) = 'admin'::text))
with check ((role_for(auth.uid()) = 'admin'::text));


create policy "Enable reading for authenticated users"
on "public"."settings"
as permissive
for select
to authenticated
using (true);


create policy "Enable full access for admins"
on "public"."station_visits"
as permissive
for all
to authenticated
using ((role_for(auth.uid()) = 'admin'::text))
with check ((role_for(auth.uid()) = 'admin'::text));


create policy "Enable full access for admins"
on "public"."stations"
as permissive
for all
to authenticated
using ((role_for(auth.uid()) = 'admin'::text))
with check ((role_for(auth.uid()) = 'admin'::text));


